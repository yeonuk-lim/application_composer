Transform: AWS::Serverless-2016-10-31
Resources:
  SendItemInfo:
    Type: AWS::Serverless::Function
    Properties:
      Description:
        Fn::Sub:
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: SendItemInfo
      CodeUri: SendItemInfo
      Handler: index.handler
      Runtime: nodejs16.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          TOPIC_NAME:
            Fn::GetAtt:
            - ItemTopic
            - TopicName
          TOPIC_ARN:
            Ref: ItemTopic
      Policies:
      - SNSPublishMessagePolicy:
          TopicName:
            Fn::GetAtt:
            - ItemTopic
            - TopicName
      Events:
        ApiPOSTitem:
          Type: Api
          Properties:
            Path: /item
            Method: POST
            RestApiId:
              Ref: Api
    Metadata:
      SamResourceId: SendItemInfo
  SendItemInfoLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${SendItemInfo}
  ItemTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Endpoint:
          Fn::GetAtt:
          - ItemQueue
          - Arn
        Protocol: sqs
  ItemQueue:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 345600
  ItemTopicToItemQueuePermission:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: sns.amazonaws.com
          Action: sqs:SendMessage
          Resource:
            Fn::GetAtt:
            - ItemQueue
            - Arn
          Condition:
            ArnEquals:
              aws:SourceArn:
                Ref: ItemTopic
      Queues:
      - Ref: ItemQueue
  StoreItemInfo:
    Type: AWS::Serverless::Function
    Properties:
      Description:
        Fn::Sub:
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: StoreItemInfo
      CodeUri: StoreItemInfo
      Handler: index.handler
      Runtime: nodejs16.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        ItemQueue:
          Type: SQS
          Properties:
            Queue:
              Fn::GetAtt:
              - ItemQueue
              - Arn
            BatchSize: 1
      Environment:
        Variables:
          TABLE_NAME:
            Ref: ItemHistoryTable
          TABLE_ARN:
            Fn::GetAtt:
            - ItemHistoryTable
            - Arn
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: ItemHistoryTable
    Metadata:
      SamResourceId: StoreItemInfo
  StoreItemInfoLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${StoreItemInfo}
  ItemHistoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      - AttributeName: isolate
        AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
      - AttributeName: id
        KeyType: HASH
      - AttributeName: isolate
        KeyType: RANGE
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      TimeToLiveSpecification:
        AttributeName: expiration
        Enabled: true
  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name:
        Fn::Sub:
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: Api
      StageName: Prod
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /item:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SendItemInfo.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
  SendMail:
    Type: AWS::Serverless::Function
    Properties:
      Description:
        Fn::Sub:
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: SendMail
      CodeUri: SendMail
      Handler: index.handler
      Runtime: nodejs16.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        ItemTopic:
          Type: SNS
          Properties:
            Topic:
              Ref: ItemTopic
            Region:
              Fn::Select:
              - 3
              - Fn::Split:
                - ':'
                - Ref: ItemTopic
      Policies:
      - SESCrudPolicy:
          IdentityName: amazon.com
      - SESCrudPolicy:
          IdentityName: yongzher@amazon.com
    Metadata:
      SamResourceId: SendMail
  SendMailLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${SendMail}
  SendSlack:
    Type: AWS::Serverless::Function
    Properties:
      Description:
        Fn::Sub:
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: SendSlack
      CodeUri: SendSlack
      Handler: index.handler
      Runtime: nodejs16.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        ItemTopic:
          Type: SNS
          Properties:
            Topic:
              Ref: ItemTopic
            Region:
              Fn::Select:
              - 3
              - Fn::Split:
                - ':'
                - Ref: ItemTopic
    Metadata:
      SamResourceId: SendSlack
  SendSlackLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName:
        Fn::Sub: /aws/lambda/${SendSlack}
